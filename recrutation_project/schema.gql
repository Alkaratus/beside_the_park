# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type TestChoiceAnswer {
  id: Int!
  content: String!
  correct: Boolean!
}

type TestSingleChoiceQuestion implements TestQuestion & TestChoiceQuestion {
  id: Int!
  content: String!
  choiceAnswers: [TestChoiceAnswer!]!
}

interface TestQuestion {
  id: Int!
  content: String!
}

interface TestChoiceQuestion implements TestQuestion {
  id: Int!
  content: String!
  choiceAnswers: [TestChoiceAnswer!]!
}

type TestMultipleChoiceQuestion implements TestQuestion & TestChoiceQuestion {
  id: Int!
  content: String!
  choiceAnswers: [TestChoiceAnswer!]!
}

type TestOrderAnswer {
  id: Int!
  content: String!
  order: Int!
}

type TestOrderQuestion implements TestQuestion {
  id: Int!
  content: String!
  orderAnswers: [TestOrderAnswer!]!
}

type TextAnswer {
  id: Int!
  correct: String!
}

type TextQuestion implements TestQuestion {
  id: Int!
  content: String!
  textAnswers: [TextAnswer!]!
}

type Test {
  id: Int!
  name: String!
  singleChoiceQuestions: [TestSingleChoiceQuestion!]!
  multipleChoiceQuestions: [TestMultipleChoiceQuestion!]!
  orderQuestions: [TestOrderQuestion!]!
  textQuestions: [TextQuestion!]!
}

type ResultMultipleChoiceQuestion implements ResultQuestion {
  questionID: Int!
  correct: Boolean!
  correctAnswersIDs: [Int!]
}

interface ResultQuestion {
  questionID: Int!
  correct: Boolean!
}

type ResultOrderQuestion implements ResultQuestion {
  questionID: Int!
  correct: Boolean!
  correctAnswersIDsOrder: [Int!]
}

type ResultSingleChoiceQuestion implements ResultQuestion {
  questionID: Int!
  correct: Boolean!
  correctAnswerID: Int
}

type ResultTextQuestion implements ResultQuestion {
  questionID: Int!
  correct: Boolean!
  correctAnswers: [String!]
}

type ResultTest {
  testID: Int!
  numberOfCorrect: Int!
  singleChoiceQuestionResults: [ResultSingleChoiceQuestion!]!
  multipleChoiceQuestionResults: [ResultMultipleChoiceQuestion!]!
  orderQuestionResults: [ResultOrderQuestion!]!
  textQuestionResults: [ResultTextQuestion!]!
}

type Query {
  getTests: [Test!]!
}

type Mutation {
  createTest(newTest: NewTest!): Test!
  submitAnswers(answers: QuestionAnswerTestAnswers!): ResultTest!
}

input NewTest {
  name: String! = ""
  singleChoiceQuestions: [NewSingleChoiceQuestion!]!
  multipleChoiceQuestions: [NewMultipleChoiceQuestion!]!
  orderQuestions: [NewOrderQuestion!]!
  textQuestions: [NewTextQuestion!]!
}

input NewSingleChoiceQuestion {
  content: String!
  answers: [NewChoiceAnswer!]!
}

input NewChoiceAnswer {
  content: String!
  correct: Boolean!
}

input NewMultipleChoiceQuestion {
  content: String!
  answers: [NewChoiceAnswer!]!
}

input NewOrderQuestion {
  content: String!
  answers: [NewOrderAnswer!]!
}

input NewOrderAnswer {
  content: String!
  order: Int!
}

input NewTextQuestion {
  content: String!
  answers: [NewTextAnswer!]!
}

input NewTextAnswer {
  correct: String!
}

input QuestionAnswerTestAnswers {
  testID: Int!
  singleChoiceQuestionsAnswers: [QuestionAnswerSingleChoice!]!
  multipleChoiceQuestionsAnswers: [QuestionAnswerMultipleChoice!]!
  orderQuestionsAnswers: [QuestionAnswerOrder!]!
  textQuestionsAnswers: [QuestionAnswerText!]!
}

input QuestionAnswerSingleChoice {
  questionID: Int!
  answerID: Int!
}

input QuestionAnswerMultipleChoice {
  questionID: Int!
  answersIDs: [Int!]!
}

input QuestionAnswerOrder {
  questionID: Int!
  answersIDsOrder: [Int!]!
}

input QuestionAnswerText {
  questionID: Int!
  answer: String!
}