
type Test{
    id: Int!
    name: String!
    choiceQuestions:[ChoiceQuestion!]
    orderQuestions:[OrderQuestion!]
    textQuestions:[TextQuestion!]
}

interface Question{
    id: Int!
    content: String!
}

type ChoiceQuestion implements Question{
    id: Int!
    content: String!
    choiceAnswers: [ChoiceAnswer!]!
    multiple: Boolean!
}

type OrderQuestion implements Question{
    id: Int!
    content: String!
    orderAnswers: [OrderAnswer!]!
}

type TextQuestion implements Question{
    id: Int!
    content: String!
    textAnswers: [TextAnswer!]!
}

type ChoiceAnswer{
    id: Int!
    content: String!
    correct: Boolean!
}

type OrderAnswer{
    id: Int!
    content: String!
    position: Int!
}

type TextAnswer{
    id: Int!
    correct: String!
}

type Query{
    tests: [Test!]
}

type Mutation{
    createTest(newTest: NewTest):Test
    submitAnswers(answers:QuestionAnswers):TestResults
}